// src/components/Header.tsx ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–û–ó–ò–¶–ò–Ø–ú–ò –ü–ê–†–ê–õ–õ–ê–ö–°–ê –ò –£–ú–ï–ù–¨–®–ï–ù–ù–´–ú –•–ï–î–ï–†–û–ú

import { useState, useEffect, useRef } from 'react'
import logo from '../assets/mu_logo.svg'
import blueBall from '../assets/header/blue-ball.png'
import blueBallBlurred from '../assets/header/blue-ball_blurred.png'
import goldenBall from '../assets/header/golden-ball.png'
import pinkBall from '../assets/header/pink-ball.png'
import subtractBig from '../assets/header/Subtract_big.png'
// import subtractMedium from '../assets/header/Subtract_medium.png'
import subtractSmall from '../assets/header/Subtract_small.png'
import clouds from '../assets/header/clouds.svg'

// --- üõë –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ó–ò–¶–ò–ò –î–õ–Ø –í–°–ï–• –®–ê–†–û–í ---
// Top: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ % (10-25% - –≤–µ—Ä—Ö–Ω—è—è –∑–æ–Ω–∞; 65-85% - –Ω–∏–∂–Ω—è—è –∑–æ–Ω–∞)
// Left: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ %
// Size: —Ä–∞–∑–º–µ—Ä –≤ px
// MaxShift: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –≤ px –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–µ

const STATIC_PARALLAX_POSITIONS = {
  blueBalls: [
    { left: 10, top: 15, size: 70, maxShiftX: 8, maxShiftY: 7 }, // –õ–µ–≤–æ, –≤–µ—Ä—Ö
    { left: 75, top: 75, size: 50, maxShiftX: 6, maxShiftY: 5 }, // –ü—Ä–∞–≤–æ, –Ω–∏–∑
    { left: 40, top: 10, size: 85, maxShiftX: 9, maxShiftY: 8 }, // –¶–µ–Ω—Ç—Ä, –≤–µ—Ä—Ö
  ],
  blurredBlueBalls: [
    { left: 90, top: 20, size: 100, maxShiftX: 4, maxShiftY: 3 }, // –ü—Ä–∞–≤–æ, –≤–µ—Ä—Ö (—Ñ–æ–Ω–æ–≤—ã–π, –º–µ–¥–ª–µ–Ω–Ω—ã–π)
    { left: 25, top: 80, size: 90, maxShiftX: 5, maxShiftY: 4 }, // –õ–µ–≤–æ, –Ω–∏–∑ (—Ñ–æ–Ω–æ–≤—ã–π, –º–µ–¥–ª–µ–Ω–Ω—ã–π)
  ],
  goldenBalls: [
    { left: 85, top: 70, size: 60, maxShiftX: 7, maxShiftY: 6 }, // –ü—Ä–∞–≤–æ, –Ω–∏–∑
  ],
  pinkBalls: [
    { left: 20, top: 78, size: 45, maxShiftX: 8, maxShiftY: 7 }, // –õ–µ–≤–æ, –Ω–∏–∑
    { left: 60, top: 18, size: 75, maxShiftX: 6, maxShiftY: 5 }, // –ü—Ä–∞–≤–æ, –≤–µ—Ä—Ö
  ],
  // –ö—Ä—É–ø–Ω—ã–µ —Ñ–æ—Ä–º—ã (–¥–ª—è –±–æ–ª–µ–µ —Å–ª–∞–±–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
  subtractsBig: [
    { left: 5, top: 68, size: 160, maxShiftX: 4, maxShiftY: 3 }, // –õ–µ–≤–æ, –Ω–∏–∑
  ],
  subtractsMedium: [], // –£–¥–∞–ª–∏–ª–∏
  subtractsSmall: [
    { left: 95, top: 85, size: 70, maxShiftX: 5, maxShiftY: 4 }, // –ö—Ä–∞–π–Ω–∏–π –ø—Ä–∞–≤–æ, –Ω–∏–∑
  ],
}
// --- –ö–û–ù–ï–¶ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –ü–û–ó–ò–¶–ò–ô ---

export default function Header() {
  const [mousePercent, setMousePercent] = useState({ x: 0.5, y: 0.5 })
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª—è–µ–º | null –∫ —Ç–∏–ø—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ null
  const requestRef = useRef<number | null>(null)
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º | null –∫ —Ç–∏–ø—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ null
  const previousTimeRef = useRef<number | null>(null)
  const headerRef = useRef<HTMLDivElement>(null)

  // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
  useEffect(() => {
    let currentX = 0.5
    let currentY = 0.5
    let targetX = 0.5
    let targetY = 0.5
    const easing = 0.08

    const handleMouseMove = (e: MouseEvent) => {
      if (!headerRef.current) return
      const rect = headerRef.current.getBoundingClientRect()
      targetX = (e.clientX - rect.left) / rect.width
      targetY = (e.clientY - rect.top) / rect.height
      targetX = Math.max(0, Math.min(1, targetX))
      targetY = Math.max(0, Math.min(1, targetY))
    }

    const animate = (time: number) => {
      if (previousTimeRef.current !== undefined) {
        currentX += (targetX - currentX) * easing
        currentY += (targetY - currentY) * easing
        setMousePercent({ x: currentX, y: currentY })
      }
      previousTimeRef.current = time
      requestRef.current = requestAnimationFrame(animate)
    }

    window.addEventListener('mousemove', handleMouseMove)
    requestRef.current = requestAnimationFrame(animate)

    return () => {
      window.removeEventListener('mousemove', handleMouseMove)
      if (requestRef.current) cancelAnimationFrame(requestRef.current)
    }
  }, [])

  // üõë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const [parallaxPositions] = useState(STATIC_PARALLAX_POSITIONS)

  const {
    blueBalls,
    blurredBlueBalls,
    goldenBalls,
    pinkBalls,
    subtractsBig,
    // subtractsMedium,
    subtractsSmall,
  } = parallaxPositions

  const renderParallaxElement = (
    src: string,
    positions: (typeof STATIC_PARALLAX_POSITIONS)[keyof typeof STATIC_PARALLAX_POSITIONS], // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
    opacity = 0.7
  ) => {
    return positions.map((pos, i) => {
      // –õ–æ–≥–∏–∫–∞ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
      const shiftX = (0.5 - mousePercent.x) * pos.maxShiftX * 2
      const shiftY = (0.5 - mousePercent.y) * pos.maxShiftY * 2
      return (
        <img
          key={i}
          src={src}
          alt=""
          className="parallax-element"
          style={{
            position: 'absolute',
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ left/top/size
            left: `${pos.left}%`,
            top: `${pos.top}%`,
            width: `${pos.size}px`,
            height: 'auto',
            opacity,
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–∞–∫—Å —Å–¥–≤–∏–≥
            transform: `translate(${shiftX}px, ${shiftY}px)`,
            transition: 'none',
            pointerEvents: 'none',
            filter: 'drop-shadow(0 4px 12px rgba(0,0,0,0.1))',
            zIndex: 1,
          }}
        />
      )
    })
  }

  return (
    <>
      {/* –§–û–ù –ù–ê –í–°–Æ –®–ò–†–ò–ù–£ */}
      <div className="header-full-bg" ref={headerRef}>
        <div className="header-gradient"></div>
        <div className="header-background">
          {renderParallaxElement(blueBall, blueBalls)}
          {renderParallaxElement(blueBallBlurred, blurredBlueBalls, 0.5)}
          {renderParallaxElement(goldenBall, goldenBalls)}
          {renderParallaxElement(pinkBall, pinkBalls)}

          {/* –°–Ω–∏–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          {renderParallaxElement(subtractBig, subtractsBig, 0.4)}
          {/* subtractsMedium —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ä–µ–Ω–¥–µ—Ä –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç */}
          {renderParallaxElement(subtractSmall, subtractsSmall, 0.4)}
        </div>
        <img src={clouds} alt="" className="header-clouds-full" />
      </div>

      {/* –ö–û–ù–¢–ï–ù–¢ –í –ö–û–ù–¢–ï–ô–ù–ï–†–ï */}
      <header className="header-enhanced container">
        <div className="header-content">
          <img
            src={logo}
            alt="–ú–∏—Ä –£–ª—ã–±–æ–∫ ‚Äî –î–µ—Ç—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"
            className="logo"
          />
          <div className="header-text">
            <h1 className="logoTitle">–ú–∏—Ä –£–ª—ã–±–æ–∫</h1>
            <p>–û–¥–Ω–∏ –∏–∑ –ª—É—á—à–∏—Ö –∞–Ω–∏–º–∞—Ç–æ—Ä–æ–≤ –û—Ä–µ–Ω–±—É—Ä–≥–∞</p>{' '}
            {/* –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ */}
          </div>
        </div>
      </header>
    </>
  )
}
